options
{
	LOOKAHEAD=4;
	STATIC=false;
}

PARSER_BEGIN(SSMathParser)
package parse;
import parse.tree.*;
import java.io.StringReader;

public class SSMathParser {

	public static TreeNode parseString(String s) throws Exception {
		SSMathParser parser = new SSMathParser(new StringReader(s));
		TreeNode node = parser.getNode();
		return node;
	}
	
	public static void main(String[] args) {
		System.out.println("Init Parser...");
		
		try {
			System.out.println(SSMathParser.parseString("x").toString());
		} catch(Exception e) {
			// nothing
		}
	}
}

PARSER_END(SSMathParser)

SKIP : { " "|"\t"| < "!" (~["\n","\r"])* ("\n"|"\r"|"\r\n") > }

TOKEN : {
	< NUMBER : ["0"-"9"] >
|	< DIGIT : (<NUMBER>)+ ("." (<NUMBER>)+)? >
|	< LETTER : ["A"-"Z"]|["a"-"z"] >
|	< FN : "sin"|"cos"|"tan"|"asin"|"acos"|"atan"|"exp"|"log"|"ln" >
|	< PLUS : "+" >
|	< MINUS : "-" >
|	< TIMES : "*" >
|	< DIV : "/" >
|	< POW : "^"|"**" >
|	< BL : "(" >
|	< BR : ")" >
|	< EOL : "\n"|"\r"|"\r\n" >
|	< EXIT : "exit"|"quit" >
}

void parse() :
{
	Token s;
	TreeNode root;
}
{
	(
		root=mathStmt() { System.out.println(root.toString()); System.out.println("Value : " + root.getValue()); }
		|	<EOL>
		|	(<EOF>|<EXIT>)	{ return; }
	)*
}

TreeNode getNode() :
{
	TreeNode root;
}
{
	root=mathStmt() { return root; }
}

TreeNode mathStmt() :
{
	Token s;
	TreeNode root;
}
{
	( root=plusStmt() ) { return root; }
}


TreeNode bktStmt() :
{
	Token s;
	TreeNode a, b;
}
{
	<BL> a=mathStmt() <BR> {
			return a;
	}
}

TreeNode plusStmt() :
{
	Token s;
	Double d = 0.0, d2 = 0.0;
	TreeNode a;
	TreeNode b = null;
}
{
	a=multStmt() {
		TreeNode sumNode = new TreeNode(TreeOperator.forName("+"));
		sumNode.addChild(a);
	}
	(
		b = multStmt() { sumNode.addChild(b); }
	)*
	{
		if (b != null) {
			return sumNode;
		} else {
			return a;
		}
	}
}

TreeNode multStmt() :
{
	Token s;
	Double d = 0.0, d2 = 0.0;
	TreeNode a;
	TreeNode b = null;
}
{
	(a=divStmt()|a=unaryStmt()) {
		TreeNode multNode = new TreeNode(TreeOperator.forName("*"));
		multNode.addChild(a);
	}
	(
		<TIMES> (b=divStmt()|b=unaryStmt()) { multNode.addChild(b); }
	)*
	{
		if (b != null) {
			return multNode;
		} else {
			return a;
		}
	}
}

TreeNode divStmt() :
{
	Token s;
	Double d = 0.0, d2 = 0.0;
	TreeNode a;
	TreeNode b = null;
}
{
	a=powStmt() (<DIV> b = powStmt())?
	{
		if (b != null) {
			TreeNode divNode = new TreeNode(TreeOperator.forName("/"));
			divNode.addChild(a);
			divNode.addChild(b);
			return divNode;
		} else {
			return a;
		}
	}
}


TreeNode powStmt() :
{
	Token s;
	Double d = 0.0, d2 = 0.0;
	TreeNode a;
	TreeNode b = null;
}
{
	a=unaryStmt() (<POW> b = unaryStmt())?
	{
		if (b != null) {
			TreeNode powNode = new TreeNode(TreeOperator.forName("^"));
			powNode.addChild(a);
			powNode.addChild(b);
			return powNode;
		} else {
			return a;
		}
	}
}

// TODO : function statements

TreeNode unaryStmt() :
{
	TreeNode a;
	int minusCount = 0;
}
{
	(<PLUS>)* a=doubleStmt() {
		return a;
	}
	|
	(
		(<MINUS>) { minusCount++; }
	)+
	(a=doubleStmt()) {
		if (minusCount % 2 != 0) {
			TreeNode negNode = new TreeNode(TreeOperator.forName("-"));
			negNode.addChild(a);
			return negNode;
		} else {
			return a;
		}
		minusCount = 1;
	}
}

TreeNode fnStmt() :
{
	Token s;
	TreeNode arg;
}
{
	((s = <FN>) (arg = bktStmt())) {
		TreeNode node = new TreeNode(FnOperator.forName(s.toString()));
		node.addChild(arg);
		return node;
	}
}

TreeNode doubleStmt() :
{
	Token s;
	Constant d = new Constant(0.0);
	Variable x;
	TreeNode node = new TreeNode(d);
}
{
	(
		s = <DIGIT> {
			try {
				d = new Constant(Double.parseDouble(s.toString()));
				node = new TreeNode(d);
			} catch (Exception e) {}
			return node;
		}
		| s = <NUMBER> {
			try {
				d = new Constant(Double.parseDouble(s.toString()));
				node = new TreeNode(d);
			} catch (Exception e) {}
			return node;
		}
		| s = <LETTER> {	// Variable
			try {
				x = new Variable(s.toString());
				node = new TreeNode(x);
			} catch (Exception e) {}
			return node;
		}
		| node = fnStmt() { return node; }
		| node = bktStmt() { return node; }
	)
}
