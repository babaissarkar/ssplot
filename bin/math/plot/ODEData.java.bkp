package math.plot;

import java.util.Vector;

import math.prim.Matrix;

public class ODEData {
    Matrix A; // The coefficient matrix
    int Xmax, Ymax, Xmin, Ymin, Xgap, Ygap; // The range

    public ODEData() {
        /* Default values */
        A = new Matrix(2, 2);
        Xmax = 10; Ymax = 10;
        Xmin = -10; Ymin = -10;
        Xgap = 1; Ygap = 1;
    }
    
    public void setMatrix(Matrix A) {
        this.A = A;
    }

    public double dx_dt (double x, double y) {
        return A.get(0, 0) * x + A.get(0, 1) * y;
    }

    public double dy_dt (double x, double y) {
        return A.get(1, 0) * x + A.get(1, 1) * y;
    }

    /** Solve the system of equations by RK 4th order method */
    public Vector<Vector<Double>> RK4Iterate(double x0, double y0) {
        Vector<Vector<Double>> soln = new Vector<Vector<Double>>();
        double x, y;
        double h = 0.05;
        double k1, k2, k3, k4;
        double p1, p2, p3, p4;
        int N = 1000;
        
        x = x0;
        y = y0;
        
        for (int i = 0; i < N; i++) {
            k1 = h * dx_dt(x, y);
            p1 = h * dy_dt(x, y);
            k2 = h * dx_dt(x + 0.5 * k1, y + 0.5 * p1);
            p2 = h * dy_dt(x + 0.5 * k1, y + 0.5 * p1);
            k3 = h * dx_dt(x + 0.5 * k2, y + 0.5 * p2);
            p3 = h * dy_dt(x + 0.5 * k2, y + 0.5 * p2);
            k4 = h * dx_dt(x + k3, y + p3);
            p4 = h * dy_dt(x + k3, y + p3);
            x += (k1 + 2*k2 + 2*k3 + k4)/6.0;
            y += (p1 + 2*p2 + 2*p3 + p4)/6.0;

            Vector<Double> row = new Vector<Double>();
            row.add(x);
            row.add(y);
            soln.add(row);
        }

        return soln;
    }

    /** Gets the data for the direction field. */
    public Vector<Vector<Double>> directionField() {
        Vector<Vector<Double>> data = new Vector<Vector<Double>>();
        
        for (int i = Xmin; i <= Xmax; i+= Xgap) {
            for (int j = Ymin; j <= Ymax; j += Ygap) {
                double Xdot, Ydot;
                double X1, Y1, X2, Y2;
               
                Xdot = dx_dt(i, j);
                Ydot = dy_dt(i, j);
                X1 = i;
                Y1 = j;
                X2 = X1 + Xdot/10;
                Y2 = Y1 + Ydot/10;

                Vector<Double> entries = new Vector<Double>();
                entries.add(X1);
                entries.add(Y1);
                entries.add(X2);
                entries.add(Y2);
                data.add(entries);
            }
        }

        return data;
    }
}
